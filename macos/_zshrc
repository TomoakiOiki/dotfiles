bindkey -e

export HISTFILESIZE=1000000000
export HISTSIZE=1000000000
export SAVEHIST=1000000000

# export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border --inline-info --preview 'bat  --color=always --style=header,grid --line-range :100 {}'"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

function awswp(){
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY_ID
  unset AWS_SESSION_TOKEN
  aws_credentials=$(aws sts assume-role --role-arn "arn:aws:iam::${1}:role/admin" --role-session-name "assume_role")
  export AWS_ACCESS_KEY_ID=$(echo $aws_credentials|jq '.Credentials.AccessKeyId'|tr -d '"')
  export AWS_SECRET_ACCESS_KEY=$(echo $aws_credentials|jq '.Credentials.SecretAccessKey'|tr -d '"')
  export AWS_SESSION_TOKEN=$(echo $aws_credentials|jq '.Credentials.SessionToken'|tr -d '"')
}

### open PR page of specific PR num
function gpr(){
  local pr=$(gh pr list |fzf --layout=reverse --height 100% --prompt "Pull Requests>")
  local prnum=$(echo $pr | awk '{print $1}')
  gh pr view $(echo $prnum) --web
}

function powered_cd() {
  if [ $# = 0 ]; then
    cd $(gtac ~/.powered_cd.log | fzf -m --height 50% --layout=reverse --preview "ls -la {}")
  elif [ $# = 1 ]; then
    cd $1
  else
    echo "powered_cd: too many arguments"
  fi
}

[ -e ~/.powered_cd.log ] || touch ~/.powered_cd.log

autoload -U compinit
compinit
zstyle ':completion:*:default' menu select=1

eval "$(anyenv init -)"

fbr(){
  git checkout $(git branch -a | tr -d " " |fzf --layout=reverse --height 50% --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")
}

fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

function chpwd() {
  powered_cd_add_log
}

function powered_cd_add_log() {
  local i=0
  cat ~/.powered_cd.log | while read line; do
    (( i++ ))
    if [ i = 30 ]; then
      sed -i -e "30,30d" ~/.powered_cd.log
    elif [ "$line" = "$PWD" ]; then
      sed -i -e "${i},${i}d" ~/.powered_cd.log
    fi
  done
  echo "$PWD" >> ~/.powered_cd.log
}

function git_prompt_info() {
  ref=$(git rev-parse --abbrev-ref HEAD) 2> /dev/null
  echo "${ZSH_THEME_GIT_PROMPT_PREFIX}${ref}${ZSH_THEME_GIT_PROMPT_CLEAN}${ZSH_THEME_GIT_PROMPT_SUFFIX}"
}

### open specific repo page
function grepo(){
  local repo
  repo=$(gh repos $(echo "$1") | fzf --layout=reverse --height 100% --prompt "repositories>")
  gh repo view $(repo) --web
  zle accept-line
}

dsh() {
	container=$(docker ps --format '{{.Names}}' | fzf --layout=reverse --height 50% --prompt "Container Name>" --preview "docker logs {}")
	docker exec -it $container /bin/sh
}

dlg() {
  container=$(docker ps --format '{{.Names}}' | fzf --layout=reverse --height 50% --prompt "Container Name>" --preview "docker logs {}")
	docker logs -f $container 
}

# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
setopt prompt_subst

# プロンプトの右側にgitのブランチを表示する
RPROMPT='[`git_prompt_info`]'

# PROMPT
PROMPT="%B%F{red}>%F{green}>%F{blue} %~%b
%F{white}%B$ %F{white}% "

FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

alias tp='terraform plan'
alias ta='terraform apply'
alias repo='gh repo view --web' 
alias pr="gh pr view --web"
alias myiss="gh issue list -A @me -w"
alias mpr="gh pr list -A @me -w"
alias zshrc='vim ~/.zshrc'
alias zshrcs='source ~/.zshrc'
alias c="powered_cd"
alias ls="exa"
alias awsp="source _awsp"
alias lzd="lazydocker" 
alias fr='ghq get --look $(ghq list | fzf --layout=reverse --height 50% +m --preview "bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/(README|readme).*" )'

export PATH="$HOME/.yarn/bin:$PATH"
export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"
export PATH="/opt/homebrew/bin:$PATH"
export PATH=$PATH:`npm prefix --location=global`/bin
export USE_GKE_GCLOUD_AUTH_PLUGIN=True

# profiling
# if (which zprof > /dev/null 2>&1) ;then
#   zprof
# fi
